[gd_scene load_steps=4 format=3 uid="uid://djytg3qnaslbe"]

[ext_resource type="Texture2D" uid="uid://7d8scc8wcvm1" path="res://assets/powerups (placeholders)/SPEARS.png" id="2_wweju"]

[sub_resource type="GDScript" id="GDScript_vglbj"]
script/source = "extends Area2D

const SPEED = 400
const MAX_DISTANCE = 400

var throwerName: String
var throwerPosition: Vector2
var direction: Vector2
var flip_h: bool
var targetPlayer: Node2D
var thrower: Node2D

@onready var navAgent = $NavigationAgent2D
@onready var sprite2D = $Sprite2D
@onready var rayCast = $\"RayCast2D\"

func _ready() -> void:
	position = throwerPosition

	#only for placeholder purposes; change when final design is done
	sprite2D.flip_h = flip_h
	sprite2D.flip_v = flip_h
	targetPlayer = find_closest_player()
	if targetPlayer:
		navAgent.set_target_position(targetPlayer.global_position)


func _physics_process(delta: float) -> void:
	if MultiplayerManager.multiplayer_mode_enabled:
		multiplayer_grappling_hook(delta)
	else:
		singleplayer_grappling_hook(delta)

func multiplayer_grappling_hook(delta: float):
	if navAgent.is_navigation_finished() and targetPlayer:
		queue_free()
		return

	#End navigation if grappling hook hits a wall
	if rayCast.is_colliding():
		if thrower:
			thrower.pull_to_target(global_position)
		queue_free()

	if targetPlayer:
		var nextPosition = navAgent.get_next_path_position()
		var directionToNext = (nextPosition - global_position).normalized()
		position += directionToNext * SPEED * delta
	else:
		position.x += SPEED * delta


func singleplayer_grappling_hook(delta):
	if rayCast.is_colliding():
		if thrower:
			thrower.pullTargetPosition = global_position
			thrower.isBeingPulled = true
			thrower.pull_to_target(global_position)
		queue_free()
	position.x += SPEED * delta


func _on_body_entered(body: Node2D) -> void:
	if body is MultiplayerPlayer and body.name != throwerName:
		if thrower:
			thrower.is_being_pulled = true
			thrower.pull_to_target(body.global_position)
		if multiplayer.get_unique_id() != body.name.to_int():
			MultiplayerManager.rpc_id(body.name.to_int(), \"pull_to_target\", throwerPosition)
		# queue_free()


func find_closest_player() -> Node2D:
	var closestPlayer = null
	var closestDistance = null

	for player in get_tree().get_current_scene().get_node(\"Players\").get_children():
		if player.name != throwerName and player.global_position.x > global_position.x:
			var distance = global_position.distance_to(player.global_position)
			if !closestDistance or distance < closestDistance:
				closestDistance = distance
				closestPlayer = player

	return closestPlayer

func updatePath():
	if targetPlayer:
		navAgent.set_target_position(targetPlayer.global_position)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xwxwa"]
size = Vector2(38.0236, 9.99908)

[node name="Grapple" type="Area2D"]
position = Vector2(-25, 6)
rotation = 0.807493
collision_mask = 2
script = SubResource("GDScript_vglbj")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(12.2874, -20.0754)
rotation = -0.0267224
scale = Vector2(0.847329, 0.850982)
texture = ExtResource("2_wweju")
offset = Vector2(-0.555308, -0.873168)
hframes = 16
vframes = 10
frame = 16

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(12.2969, -20.085)
rotation = -0.801223
shape = SubResource("RectangleShape2D_xwxwa")

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
path_desired_distance = 5.0
target_desired_distance = 5.0
path_postprocessing = 1
debug_enabled = true
debug_use_custom = true
debug_path_custom_color = Color(1, 0, 0, 1)

[node name="NavAgentTimer" type="Timer" parent="."]
wait_time = 0.1
autostart = true

[node name="RayCast2D" type="RayCast2D" parent="."]
position = Vector2(21.9345, -31.605)
target_position = Vector2(4.14787, -4.33534)

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="timeout" from="NavAgentTimer" to="." method="updatePath"]
